Dockerfile
==========

--> A Dockerfile is a text document containing a series of instructions on how to build a Docker image. It defines everything needed to create a containerized application, including the base image, the application code, and any necessary dependencies.

--> Docker runs these instructions from top to bottom 

--> These includes instructions like FROM,COPY, ADD, RUN, CMD, ENTRYPOINT, ARG, ENV, WORKDIR, EXPOSE, VOLUME,etc...

--> Instructions are not a case-sensitive , But use uppecase for better redability.

--> Default name of docker file is "Dockerfile"

Example:

FROM tomcat:9.0.100
COPY target/maven-web-application.war /usr/local/tomcat/webapps/maven-web-application.war
RUN echo "hello kk funda"



1. Base Image
-------------


FROM <image>:<tag>

--> Specifies the base image to use for the Docker image. 
--> This is the starting point from which your image is built. 
--> Common base images include official images for operating systems like Ubuntu or Alpine, or language-specific images like java or Node.js.



Example: FROM ubuntu:20.04












2. Maintainer (Optional)
------------------------


MAINTAINER <name> <email>

--> Provides information about the maintainer of the image. 
--> This instruction is now deprecated in favor of using LABEL, but it's still sometimes used in older Dockerfiles.


Example: MAINTAINER KK EDUCATION <kkeducationblr@gmail.com>















3. Labels (Metadata)
---------------------

LABEL <key>=<value> ...

Purpose: Adds metadata to the image in the form of key-value pairs. This can include information about the version, description, or any custom information you want to include.


Examples: 

LABEL version="1.0" description="A sample image"

LABEL company="KK EDUCATION"
LABEL mail="kkeducationblr@gmail.com"

NOTE: More than one LABEL will allow in image

How to copy files from system to continer and container to system?
--------------------------------------------------------------------
docker cp five:/usr/local/tomcat/logs/catalina.2025-05-17.log catalina.2025-05-17.log
docker cp demo.txt javawebapp:/usr/local/tomcat/

Q: what is the diff between COPY and docker cp?
COPY is a docker file instruction using this we can copy to the image while building files/folders 
docker cp Is a command copy files/dirs to container or to a system

what is the use of docker diff?
-------------------------------docker diff <cid/cname>
=============================================
How to inspect a container?
---------------------------
docker inspect <cid/cname>
docker inspect --format "{{.NetworkSettings.IPAddress}}" mavenapp
docker inspect --format "{{.State.Pid}}" 0d2dab452ceb
docker inspect --format "{{.NetworkSettings.IPAddress}},{{.State.Status}}" 0d2dab452ceb
docker inspect --format "IP Address: {{.NetworkSettings.Networks.bridge.IPAddress}}, Name: {{.Name}}" mavenapp










4. Copy Files
-------------

COPY <src> <dest>

Purpose: Copies files or directories from the host machine to the image. The source path is relative to the build context (the directory containing the Dockerfile), and the destination path is inside the image.
get the file from container to local
----------------------------------
 docker cp javawebapp:/usr/local/tomcat/logs/localhost.2025-07-29.log localhost.2025-07-29.log
copy file from local to container
--------------------------
docker cp test.sh javawebapp:/usr/local/tomcat

Example: COPY target/mavan-web-application.war /usr/local/tomcat/webapps/maven-web-application.war


         COPY . .
    
        COPY abc.tar /opt/











5. Add Files
------------

ADD <src> <dest>

Purpose: Similar to COPY, but with additional features like handling remote URLs and automatically extracting tar archives.


Example: ADD https://example.com/file.tar.gz /app/

         ADD abc.tar /opt/    -> untar 













6. RUN 
------
--> RUN instruction used to execute a commands/ scripts etc.
--> RUN instruction will be exuecuted while creating an image. ************
--> This instruction will be executed based on based image.
--> It can be executed in a two ways 1. shell form and 2. executable form.

use cases: 1. cretaing a directory
           2. execute a software
           3. unzip any zip file etc..
EX:
   shell form
   ----------
   RUN mkdir -p /opt/app
   RUN tar -xvzf /opt/apache-tomcat.tar.gz
   RUN useradd kkfunda
   RUN apt-get update && apt-get install git wget -y
   RUN ./setup.sh



   executable form
   ---------------
   RUN ["apt-get", "install", "-y", "vim"]
   RUN ["/bin/sh", "setup.sh"]
   RUN ["useradd","kkfunda"]

NOTE: please use shell form for RUN instructions, so we can replace variables easily.











7. CMD
------
--> CMD instruction used to execute a commands/ scripts etc.
--> CMD instruction will be exuecuted while creating a container. ****
--> This instruction will be executed based on based image.

EX:
   shell form
   ----------
   CMD sh app.sh
   CMD java -jar abc.jar

   executable form
   ---------------
   CMD ["sh", "app.sh"]
   CMD ["java", "-jar", "abc.jar"]










IQ] what is shell form and executable form in docker?

ANS:  RUN, CMD, ENTRYPOINT instructions can be defined in a shell form or executable form.

--> When we use shell form our command will be running as a "child process" under bash/sh (Shell)

  EX:  RUN java -jar app.jar

     --> In background above command will be executed as below
         
         /bin/sh -c java -jar app.jar
   [parent process]   [child process]

   NOTE: if you kill the parent process , It will not kill child process because some times child process connected to DB.

   EX: RUN ["java", "-jar", "app.jar"]

     --> In background above command will be executed as below
      
         /bin/java -jar app.jar
         [parent process]

NOTE: when you are using CMD and ENTRYPOINT executable form is preferable.











IQ] what is the difference between RUN and CMD?

ANS:
  --> RUN instruction will be exuecuted while creating an image.
  --> CMD instruction will be exuecuted while creating a container.
  --> we have more than one RUN instruction in a Dockerfile. All the RUN instructions will be executed, while   creating an image in the defined order (top to bottom).

RUN sh abc.sh
RUN echo "kkfunda"

CMD echo "one"
CMD echo "two"
CMD echo "three"

IQ] can you have a more than one CMD in a Dockerfile?
 Ans: Yes you have, But only the last one/ recent one in the order will be executed while creating a container.











8. ENTRYPOINT
-------------

--> CMD instruction used to execute a commands/ scripts etc.
--> RUN instruction will be exuecuted while creating a container.
-->  ENTRYPOINT instruction used to execute a commands/ scripts etc.

EX: ENTRYPOINT java -jar app.jar  --> shell form

    ENTRYPOINT ["java", "-jar", "app.jar"]--> executable form


IQ] what is the difference between CMD and ENTRYPOINT?
ANS:

  --> CMD instructions are overriden while creating a container, But ENTRYPOINT instructions can't be overrriden while creating a container.
  --> Both the instructions are used to start our container.

IQ] can we keep both CMD and ENTRYPOINT instructions in a Dockerfile?

Ans: Yes, But CMD instructions will not be executed if both are present, CMD instructions will be passed as an argument to the ENTRYPOINT.

  EX: CMD ls
      ENTRYPOINT ["echo", "Hello"]

    --> It will be executed as below:
       
        /bin/echo Hello ls

       output: Hello ls

scenario: Our requirement always we have to execute sh catalina.sh, But argument by default it has to execute "start"

       Ex: CMD start
           ENTRYPOINT ["sh","catalina.sh"]

      /bin/sh catlina.sh start


CMD pwd
ENTRYPOINT ["echo","Hello"]

   /bin/echo Hello pwd



IQ] what is the difference between COPY and docker cp?

IQ] what is the difference between RUN and docker run?


===============================================================================================








Sample Docker File 1
---------------------

FROM debian:12.0
MAINTAINER KKFUNDA <kkeducationblr@gmail.com>
LABEL author="kkfunda"
LABEL email="kkeducationblr@gmail.com"
RUN echo "welcome to kkkfunda"
RUN apt update -y
RUN apt install git wget tree -y
RUN mkdir -p /opt/app
RUN echo "welcome to kk devops"

docker build -t firstimage .


IQ] My dockerfile contains more layers ? How to reduse it ?

Ans: you can use && operator to merge all RUN instruction.


IQ] what is docker build cahce?


IQ] what if we delete all the images and again build the docker file? what happens?


Ans:  
